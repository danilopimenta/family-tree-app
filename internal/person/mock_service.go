// Code generated by mockery v2.20.0. DO NOT EDIT.

package person

import (
	context "context"

	domain "github.com/danilopimenta/family-tree-app/internal/person/domain"
	mock "github.com/stretchr/testify/mock"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

type MockService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockService) EXPECT() *MockService_Expecter {
	return &MockService_Expecter{mock: &_m.Mock}
}

// GetAllMembers provides a mock function with given fields: ctx
func (_m *MockService) GetAllMembers(ctx context.Context) ([]domain.Person, error) {
	ret := _m.Called(ctx)

	var r0 []domain.Person
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]domain.Person, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []domain.Person); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Person)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_GetAllMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllMembers'
type MockService_GetAllMembers_Call struct {
	*mock.Call
}

// GetAllMembers is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockService_Expecter) GetAllMembers(ctx interface{}) *MockService_GetAllMembers_Call {
	return &MockService_GetAllMembers_Call{Call: _e.mock.On("GetAllMembers", ctx)}
}

func (_c *MockService_GetAllMembers_Call) Run(run func(ctx context.Context)) *MockService_GetAllMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockService_GetAllMembers_Call) Return(_a0 []domain.Person, _a1 error) *MockService_GetAllMembers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_GetAllMembers_Call) RunAndReturn(run func(context.Context) ([]domain.Person, error)) *MockService_GetAllMembers_Call {
	_c.Call.Return(run)
	return _c
}

// GetMemberAncestor provides a mock function with given fields: _a0, _a1
func (_m *MockService) GetMemberAncestor(_a0 context.Context, _a1 string) (domain.Family, error) {
	ret := _m.Called(_a0, _a1)

	var r0 domain.Family
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.Family, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.Family); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(domain.Family)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_GetMemberAncestor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMemberAncestor'
type MockService_GetMemberAncestor_Call struct {
	*mock.Call
}

// GetMemberAncestor is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
func (_e *MockService_Expecter) GetMemberAncestor(_a0 interface{}, _a1 interface{}) *MockService_GetMemberAncestor_Call {
	return &MockService_GetMemberAncestor_Call{Call: _e.mock.On("GetMemberAncestor", _a0, _a1)}
}

func (_c *MockService_GetMemberAncestor_Call) Run(run func(_a0 context.Context, _a1 string)) *MockService_GetMemberAncestor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockService_GetMemberAncestor_Call) Return(_a0 domain.Family, _a1 error) *MockService_GetMemberAncestor_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_GetMemberAncestor_Call) RunAndReturn(run func(context.Context, string) (domain.Family, error)) *MockService_GetMemberAncestor_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockService interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockService(t mockConstructorTestingTNewMockService) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
